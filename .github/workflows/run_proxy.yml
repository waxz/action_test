# This is a basic workflow to help you get started with Actions

name: run_proxy

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  extract-secrets:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}
        
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Set current date as env variable                
        run: |
          echo "START_TIME=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
          echo "STAMP=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV
      
      - name: Echo current date
        run: |
          echo ${{ env.STAMP }} # Gives "2022-12-11-01-42-20"
          echo ${{ env.START_TIME }} # Gives "2022-12-11T01:42:20"

      - name: Create Custom User With secrets    
        shell: bash
        run: |
          echo github.workspace ${{ github.workspace }}
          sudo apt-get install -y openssh-server tmux
          #autossh 
    
          sudo adduser --disabled-password --gecos "" "$MY_SSH_USER"
          sudo usermod -a -G sudo "$MY_SSH_USER"
          sudo usermod -a -G docker "$MY_SSH_USER"
          
          echo $MY_SSH_USER:$MY_SSH_PSW | sudo chpasswd



          
          sudo wget -q https://raw.githubusercontent.com/gpakosz/.tmux/refs/heads/master/.tmux.conf -O /home/$MY_SSH_USER/.tmux.conf
          sudo wget -q https://raw.githubusercontent.com/gpakosz/.tmux/refs/heads/master/.tmux.conf.local -O /home/$MY_SSH_USER/.tmux.conf.local
          
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/download/2025.2.0/cloudflared-linux-amd64  -O /bin/cloudflared





          # netbird
          curl -fsSL https://pkgs.netbird.io/install.sh | sh

          { # try
          sh -c "$NETBIRD_UP" &&
          } || { # catch
          # netbird status 
          netbird status -d --filter-by-status connected
          
          }
          # netbird status 
          netbird status -d --filter-by-status connected



          
          



          # add ssh pub key
          cd /home/$MY_SSH_USER; umask 0077; sudo mkdir -p .ssh; sudo echo "$SSH_PUBLIC_KEY" >> .ssh/authorized_keys
          cd ~


          
          
          # go proxy https://github.com/snail007/goproxy/tree/master
          sudo bash -c "$(curl -s -L https://raw.githubusercontent.com/snail007/goproxy/master/install_auto.sh)"
          nohup proxy http -t kcp -p ":38080" --kcp-key mypassword &
          


          file=/tmp/blocker.txt
          
          # touch $file   
          echo xx >> $file
          sudo bash -c "echo rm $file >> /bin/quit-ssj.sh"
          sudo chmod +x /bin/quit-ssj.sh


          
          # ssh -o "StrictHostKeyChecking no" $MY_SSHJ_NS@ssh-j.com -N -R $MY_SSHJ_HOST:22:localhost:22


          echo $MY_SSH_PSW | sudo -S sleep 1 && sudo su - "$MY_SSH_USER"
          nohup ssh -o StrictHostKeyChecking=no  $MY_SSHJ_NS@ssh-j.com -N -R $MY_SSHJ_HOST:22:localhost:22 &

          
          # nohup autossh -o "StrictHostKeyChecking=no" -o "ExitOnForwardFailure=yes" -o "ServerAliveInterval=10" -o "ServerAliveCountMax=3"   $MY_SSHJ_NS@ssh-j.com -N -R $MY_SSHJ_HOST:22:localhost:22 &
          
          # autossh -o "StrictHostKeyChecking=no" -o "ExitOnForwardFailure=yes" -o "ServerAliveInterval=10" -o "ServerAliveCountMax=3"   $MY_SSHJ_NS@ssh-j.com -N -R $MY_SSHJ_HOST:22:localhost:22

          
          echo run ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no   -J $MY_SSHJ_NS@ssh-j.com $MY_SSH_USER@$MY_SSHJ_HOST
         

          
          echo "waiting on file $file ......"   
          echo "run quit-ssj.sh to exit"   
          
          while [  -s "$file" ]; do sleep 10; done
          echo "exited......"
          
        env:
          SUPER_SECRET: ${{ secrets.SUPER_SECRET }}       
          MY_SSH_USER: ${{secrets.MY_SSH_USER}}
          MY_SSH_PSW: ${{secrets.MY_SSH_PSW}}
          MY_SSHJ_NS: ${{secrets.MY_SSHJ_NS}}
          MY_SSHJ_HOST: ${{secrets.MY_SSHJ_HOST}}      
          NETBIRD_UP: ${{secrets.NETBIRD_UP}}      
          SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
 
      - uses: actions/upload-artifact@v4
        with:
          name: my-install-${{ env.STAMP }}
          path:  /tmp/install/*  
          compression-level: 9 # maximum compression
