# This is a basic workflow to help you get started with Actions

name: run_proxy

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  run_proxy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set current date as env variable
      run: |
        echo "START_TIME=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
        echo "STAMP=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV

    - name: Echo current date
      run: |
        echo ${{ env.STAMP }} # Gives "2022-12-11-01-42-20"
        echo ${{ env.START_TIME }} # Gives "2022-12-11T01:42:20"

    - name: Create User
      shell: bash
      run: |
        echo github.workspace ${{ github.workspace }}
        sudo apt-get install -y openssh-server tmux
        #autossh

        sudo adduser --disabled-password --gecos "" "$MY_SSH_USER"
        sudo usermod -a -G sudo "$MY_SSH_USER"
        sudo usermod -a -G docker "$MY_SSH_USER"
        echo $MY_SSH_USER:$MY_SSH_PSW | sudo chpasswd

        # echo '# UID' | sudo tee -a /home/$MY_SSH_USER/.bashrc > /dev/null
        # echo 'export UID=$(id -u)' | sudo tee -a /home/$MY_SSH_USER/.bashrc > /dev/null
        # echo '# GID' | sudo tee -a /home/$MY_SSH_USER/.bashrc > /dev/null
        # echo 'export GID=$(id -g)' | sudo tee -a /home/$MY_SSH_USER/.bashrc > /dev/null


        file=/tmp/blocker.txt
        # touch $file
        echo xx >> $file
        sudo chown $MY_SSH_USER:$MY_SSH_USER $file


        # https://stackoverflow.com/questions/820517/bashrc-at-ssh-login
        cat << 'EOF' | sudo tee -a /home/$MY_SSH_USER/.bashrc
        export UID=$(id -u)
        export GID=$(id -g)
        export PATH=$PATH:~/.local/bin:~/.cargo/bin
        export XDG_CONFIG_HOME=~/.config
        EOF

        cat << EOF | sudo tee -a /home/$MY_SSH_USER/.bashrc
        alias quit-waiter="rm $file && exit"
        EOF

        cat << EOF | sudo tee -a /home/$MY_SSH_USER/.bash_profile
        if [ -f ~/.bashrc ]; then
          . ~/.bashrc
        fi
        EOF

        sudo wget -q https://raw.githubusercontent.com/gpakosz/.tmux/refs/heads/master/.tmux.conf -O /home/$MY_SSH_USER/.tmux.conf
        sudo wget -q https://raw.githubusercontent.com/gpakosz/.tmux/refs/heads/master/.tmux.conf.local -O /home/$MY_SSH_USER/.tmux.conf.local

        nohup ssh -o StrictHostKeyChecking=no  $MY_SSHJ_NS@ssh-j.com -N -R $MY_SSHJ_HOST:22:localhost:22 &

        # add ssh pub key
        export HOME=/home/$MY_SSH_USER
        sudo mkdir -p $HOME/.ssh
        sudo echo "$SSH_PUBLIC_KEY" >> $HOME/.ssh/authorized_keys
        sudo chown $MY_SSH_USER:$MY_SSH_USER $HOME/.ssh
        sudo chown $MY_SSH_USER:$MY_SSH_USER $HOME/.ssh/authorized_keys
        sudo chmod 600 $HOME/.ssh/authorized_keys
        sudo chmod 700 $HOME/.ssh

      env:
        SUPER_SECRET: ${{ secrets.SUPER_SECRET }}
        MY_SSH_USER: ${{secrets.MY_SSH_USER}}
        MY_SSH_PSW: ${{secrets.MY_SSH_PSW}}
        MY_SSHJ_NS: ${{secrets.MY_SSHJ_NS}}
        MY_SSHJ_HOST: ${{secrets.MY_SSHJ_HOST}}
        NETBIRD_UP: ${{secrets.NETBIRD_UP}}
        SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
        NETBIRD_KEY: ${{secrets.NETBIRD_KEY}}
        NETBIRD_NAME: ${{secrets.NETBIRD_NAME}}
        TAIL_KEY: ${{secrets.TAIL_KEY}}

    - name: Create tailscale
      shell: bash
      run: |
        #sudo wget -q https://github.com/cloudflare/cloudflared/releases/download/2025.2.0/cloudflared-linux-amd64  -O /bin/cloudflared

        #tailscale
        sudo ufw allow 41641/udp

        curl -fsSL https://tailscale.com/install.sh | sh

        echo 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.d/99-tailscale.conf
        echo 'net.ipv6.conf.all.forwarding = 1' | sudo tee -a /etc/sysctl.d/99-tailscale.conf
        sudo sysctl -p /etc/sysctl.d/99-tailscale.conf

        printf '#!/bin/sh\n\nethtool -K %s rx-udp-gro-forwarding on rx-gro-list off \n' "$(ip -o route get 8.8.8.8 | cut -f 5 -d " ")" | sudo tee /etc/networkd-dispatcher/routable.d/50-tailscale
        sudo chmod 755 /etc/networkd-dispatcher/routable.d/50-tailscale





        sudo tailscale up --hostname=github-action --auth-key="$TAIL_KEY" --advertise-exit-node
        tailscale status

      env:
        SUPER_SECRET: ${{ secrets.SUPER_SECRET }}
        MY_SSH_USER: ${{secrets.MY_SSH_USER}}
        MY_SSH_PSW: ${{secrets.MY_SSH_PSW}}
        MY_SSHJ_NS: ${{secrets.MY_SSHJ_NS}}
        MY_SSHJ_HOST: ${{secrets.MY_SSHJ_HOST}}
        NETBIRD_UP: ${{secrets.NETBIRD_UP}}
        SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
        NETBIRD_KEY: ${{secrets.NETBIRD_KEY}}
        NETBIRD_NAME: ${{secrets.NETBIRD_NAME}}
        TAIL_KEY: ${{secrets.TAIL_KEY}}

    - name: Create  netbird
      shell: bash
      run: |
        #exit 0

        # netbird
        curl -fsSL https://pkgs.netbird.io/install.sh | sudo bash
        export NETBIRD_UP_CMD="PIONS_LOG_DEBUG=all NB_LOG_LEVEL=debug GRPC_GO_LOG_VERBOSITY_LEVEL=99 GRPC_GO_LOG_SEVERITY_LEVEL=info netbird up --hostname $NETBIRD_NAME --setup-key $NETBIRD_KEY"
        if ! sh -c "$NETBIRD_UP_CMD"; then
          echo "NETBIRD_UP fail with exit code: $?"
          netbird status -d --filter-by-status connected
          if [ $? -ne 0 ]; then
            echo "netbird status failed with exit code: $?"
          fi
        fi

        # netbird status
        netbird status -d --filter-by-status connected

      env:
        SUPER_SECRET: ${{ secrets.SUPER_SECRET }}
        MY_SSH_USER: ${{secrets.MY_SSH_USER}}
        MY_SSH_PSW: ${{secrets.MY_SSH_PSW}}
        MY_SSHJ_NS: ${{secrets.MY_SSHJ_NS}}
        MY_SSHJ_HOST: ${{secrets.MY_SSHJ_HOST}}
        NETBIRD_UP: ${{secrets.NETBIRD_UP}}
        SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
        NETBIRD_KEY: ${{secrets.NETBIRD_KEY}}
        NETBIRD_NAME: ${{secrets.NETBIRD_NAME}}
        TAIL_KEY: ${{secrets.TAIL_KEY}}
    - name: Create go proxy
      shell: bash
      run: |
        
        # cargo install bore-cli
        # https://github.com/xtaci/kcptun
        curl -L  https://raw.githubusercontent.com/xtaci/kcptun/master/download.sh | sh
        mv kcptun-linux-amd64-*.tar.gz kcptun.tar.gz
        tar xvf ./kcptun.tar.gz
        ulimit -n 65535
        # https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/7/html/kernel_administration_guide/working_with_sysctl_and_kernel_tunables#modifying_files_in_etc_sysctl_d

        cat << EOF | sudo tee -a /etc/sysctl.d/99-custom.conf
        net.core.rmem_max=26214400 // BDP - bandwidth delay product
        net.core.rmem_default=26214400
        net.core.wmem_max=26214400
        net.core.wmem_default=26214400
        net.core.netdev_max_backlog=2048 // proportional to -rcvwnd
        EOF
        sysctl -p /etc/sysctl.d/99-custom.conf

        # go proxy https://github.com/snail007/goproxy/tree/master


        sudo bash -c "$(curl -s -L https://raw.githubusercontent.com/snail007/goproxy/master/install_auto.sh)"
        nohup proxy http -t kcp -m -p ":38080" --kcp-key mypassword --kcp-mode="fast3" &
        nohup proxy http -t tcp -p "0.0.0.0:38081" &
        nohup ./server_linux_amd64 -t ":38081" -l ":4000" -mode fast3 -nocomp -sockbuf 16777217 -dscp 46 &
        # nohup bore local 38081 --to bore.pub -p 38081 &

    - name: Create waiter program
      shell: bash
      run: |
        file=/tmp/blocker.txt
        echo "waiting on file $file ......"
        echo "run quit-waiter.sh to exit"
        #https://stackoverflow.com/questions/19505227/integer-expression-expected-error-in-shell-script
        MinutesIter="1"
        MinutesIter="${MinutesIter//[$'\t\r\n ']}"

        while [  -s "$file" ] && [ $MinutesIter -ne 3500 ]; do sleep 6; ((MinutesIter++)) ; done
        echo "exited......"

        sudo tailscale logout
        sudo netbird down
      #- name: Setup tmate session
      #uses: mxschmitt/action-tmate@v3  
    - uses: actions/upload-artifact@v4
      with:
        name: my-install-${{ env.STAMP }}
        path: /tmp/install/*
        compression-level: 9 # maximum compression
