# This is a basic workflow to help you get started with Actions

name: run_proxy

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

    #schedule:
    # https://github.com/orgs/community/discussions/13454#discussioncomment-11159669
    #- cron: '47 */1 * * *'

jobs:
  run_proxy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
    - name: Check if it's 0/6/12/18
      run: |
        echo "event name is:" ${{ github.event_name }}

        current_hour=$(TZ='Asia/Shanghai' date +'%H')
        echo "Current hour in PST: $current_hour"
          
        if [ "$current_hour" == "00" ]; then
          echo "run task on schedule"
          echo "run_tasks=true" >> $GITHUB_ENV
        fi
        if [ "$current_hour" == "06" ]; then
          echo "run task on schedule"
          echo "run_tasks=true" >> $GITHUB_ENV
        fi
        if [ "$current_hour" == "12" ]; then
          echo "run task on schedule"
          echo "run_tasks=true" >> $GITHUB_ENV
        fi
        if [ "$current_hour" == "18" ]; then
          echo "run task on schedule"
          echo "run_tasks=true" >> $GITHUB_ENV
        fi
        if [ ! "${{ github.event_name }}" == "schedule" ]; then
          echo "run task on ${{ github.event_name }}"
          echo "run_tasks=true" >> $GITHUB_ENV
        fi

    - name: Checkout Code
      if: env.run_tasks == 'true'
      uses: actions/checkout@v3

    - name: Set current date as env variable
      if: env.run_tasks == 'true'
      run: |
        echo "START_TIME=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
        echo "STAMP=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV

        start_time=$(date +%s)
        end_time=$((start_time+6*3600-1000))

        echo "RUNNER_START_STAMP=$start_time" >> $GITHUB_ENV
        echo "RUNNER_END_STAMP=$end_time" >> $GITHUB_ENV

    - name: Echo current date
      if: env.run_tasks == 'true'
      run: |
        echo ${{ env.STAMP }} # Gives "2022-12-11-01-42-20"
        echo ${{ env.START_TIME }} # Gives "2022-12-11T01:42:20"
    - name: Install dependency
      if: env.run_tasks == 'true'
      shell: bash
      run: |
        echo github.workspace ${{ github.workspace }}

        ./command/install-essential-packages.sh




        # add ssh pub key
        export USER_HOME=$HOME
        mkdir -p $USER_HOME/.ssh
        echo "$SSH_PUBLIC_KEY" | tee -a  $USER_HOME/.ssh/authorized_keys
        echo "$SSH_PUBLIC_KEY" | tee -a   $USER_HOME/.ssh/id_ed25519.pub
        echo "$SSH_PRIVATE_KEY" | tee -a   $USER_HOME/.ssh/id_ed25519
        chmod 600 $USER_HOME/.ssh/*
        chmod 700 $USER_HOME/.ssh

        ./command/create-connection.sh
        ./command/run-proxy.sh
        ./command/install-vscode.sh





        # setup gh
        git config --global user.name "$MY_SSH_USER"
        git config --global user.email "$MY_SSH_USER@github.com"

        echo "$GH_TOKEN_ENV" | gh auth login --with-token
        gh run list --workflow=run_proxy.yml
        ./command/prepare.sh
        ./command/clone-projects.sh
        ./command/install-pacakes.sh
      env:
        SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
        SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
        GH_TOKEN_ENV: ${{secrets.GH_TOKEN}}
        MY_SSH_USER: ${{secrets.MY_SSH_USER}}
        MY_SSH_PSW: ${{secrets.MY_SSH_PSW}}
        CLOUDFLARED_LOGIN_CMD: ${{secrets.CLOUDFLARED_LOGIN_CMD}}
        LOCALNET_AUTHTOKEN: ${{ secrets.LOCALNET_AUTHTOKEN }}
        LOCALNET_API: ${{ secrets.LOCALNET_API }}
        PINGGY_TOKEN: ${{ secrets.PINGGY_TOKEN }}
        PIPING_CMD: ${{secrets.PIPING_CMD}}
        PINGGY_SSH_TOKEN: ${{secrets.PINGGY_SSH_TOKEN}}
        MQTT_TUNNEL_TOPIC: ${{ secrets.MQTT_TUNNEL_TOPIC}}
        BORE_PORT: ${{secrets.BORE_PORT}}
        MY_SSHJ_NS: ${{secrets.MY_SSHJ_NS}}
        MY_SSHJ_HOST: ${{secrets.MY_SSHJ_HOST}}
    - name: Create User
      if: env.run_tasks == 'true'
      shell: bash
      run: |
        
        # source $HOME/.bashrc

        # vc_mnt $MY_SSH_USER:$MY_SSH_PSW ./command/secret.vc /mnt/data/secret/ 1

        #autossh

        sudo adduser --disabled-password --gecos "" "$MY_SSH_USER"
        sudo usermod -a -G sudo "$MY_SSH_USER"
        sudo usermod -a -G docker "$MY_SSH_USER"
        echo $MY_SSH_USER:$MY_SSH_PSW | sudo chpasswd

        # echo '# UID' | sudo tee -a /home/$MY_SSH_USER/.bashrc > /dev/null
        # echo 'export UID=$(id -u)' | sudo tee -a /home/$MY_SSH_USER/.bashrc > /dev/null
        # echo '# GID' | sudo tee -a /home/$MY_SSH_USER/.bashrc > /dev/null
        # echo 'export GID=$(id -g)' | sudo tee -a /home/$MY_SSH_USER/.bashrc > /dev/null


        file=/tmp/blocker.txt
        # touch $file
        echo xx >> $file
        sudo chown $MY_SSH_USER:$MY_SSH_USER $file


        # https://stackoverflow.com/questions/820517/bashrc-at-ssh-login
        cat << 'EOF' | sudo tee -a /home/$MY_SSH_USER/.bashrc
        export UID=$(id -u)
        export GID=$(id -g)
        export PATH=$PATH:~/.local/bin:~/.cargo/bin
        export XDG_CONFIG_HOME=~/.config
        EOF

        cat << EOF | sudo tee -a /home/$MY_SSH_USER/.bashrc
        alias quit-waiter="rm $file && exit"
        EOF

        cat << EOF | sudo tee -a /home/$MY_SSH_USER/.bash_profile
        if [ -f ~/.bashrc ]; then
          . ~/.bashrc
        fi
        EOF






        sudo cp $HOME/.tmux* /home/$MY_SSH_USER/






        # add ssh pub key


        export USER_HOME=/home/$MY_SSH_USER
        sudo mkdir -p $USER_HOME/.ssh
        echo "$SSH_PUBLIC_KEY" | sudo tee -a   $USER_HOME/.ssh/authorized_keys
        echo "$SSH_PUBLIC_KEY" | sudo tee -a   $USER_HOME/.ssh/id_ed25519.pub
        echo "$SSH_PRIVATE_KEY"| sudo tee -a   $USER_HOME/.ssh/id_ed25519

        sudo chown $MY_SSH_USER:$MY_SSH_USER $USER_HOME/.ssh
        sudo chown $MY_SSH_USER:$MY_SSH_USER $USER_HOME/.ssh/*

        sudo chmod 600 $USER_HOME/.ssh/*
        sudo chmod 700 $USER_HOME/.ssh




        mkdir -p $HOME/.config
        sudo mkdir -p $USER_HOME/.config

        git clone https://github.com/LazyVim/starter $HOME/.config/nvim

        sudo cp -r $HOME/.config/nvim $USER_HOME/.config/nvim
        sudo chown $MY_SSH_USER:$MY_SSH_USER $USER_HOME/.config/nvim
        sudo chown $MY_SSH_USER:$MY_SSH_USER $USER_HOME/.config/nvim/*









        # nginx auth
        # sudo apt install -y apache2-utils
        if [ ! -f /etc/nginx/.htpasswd ]; then sudo htpasswd -bcB -C 10 /etc/nginx/.htpasswd $MY_SSH_USER $MY_SSH_PSW ; else sudo htpasswd -bB -C 10 /etc/nginx/.htpasswd $MY_SSH_USER $MY_SSH_PSW ;fi





        # setup nginx

        if [ -d /etc/nginx/sites-enabled/default ]; then sudo unlink /etc/nginx/sites-enabled/default; fi


        sudo mkdir -p /etc/nginx/locations

        if [ ! -f /etc/nginx/conf.d/default.conf ];then 

        cat << 'EOF' | sudo tee /etc/nginx/conf.d/default.conf
        server {
        listen 80;
        server_name localhost;
        include /etc/nginx/locations/*.conf;
        }
        EOF
        fi 


        cat << 'EOF' | sudo tee -a /etc/nginx/locations/vscode.conf
        location /vscode/ {

        # auth
        auth_basic "Restricted Access";
        auth_basic_user_file /etc/nginx/.htpasswd;
        proxy_set_header Authorization "";


        # rewrite ^/vscode(/.*)$ $1 break;
        proxy_pass http://127.0.0.1:3030;
        # proxy_set_header Host $host:$server_port;  # Ensure Host contains port
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Inform the backend that it's under `/vscode/`
        proxy_set_header X-Script-Name /vscode;
        proxy_set_header X-Forwarded-Prefix /vscode;
        proxy_redirect off;
        # websocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
        }
        EOF

        sudo service nginx restart
        sudo nginx -t && sudo systemctl reload nginx

      env:
        SUPER_SECRET: ${{ secrets.SUPER_SECRET }}
        MY_SSH_USER: ${{secrets.MY_SSH_USER}}
        MY_SSH_PSW: ${{secrets.MY_SSH_PSW}}
        MY_SSHJ_NS: ${{secrets.MY_SSHJ_NS}}
        MY_SSHJ_HOST: ${{secrets.MY_SSHJ_HOST}}
        NETBIRD_UP: ${{secrets.NETBIRD_UP}}
        SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
        SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}

        NETBIRD_KEY: ${{secrets.NETBIRD_KEY}}
        NETBIRD_NAME: ${{secrets.NETBIRD_NAME}}
        TAIL_KEY: ${{secrets.TAIL_KEY}}
        TOR_PASSWORD: ${{secrets.TOR_PASSWORD}}
        BORE_PORT: ${{secrets.BORE_PORT}}
        GH_TOKEN_ENV: ${{secrets.GH_TOKEN}}
        CLOUDFLARED_LOGIN_CMD: ${{secrets.CLOUDFLARED_LOGIN_CMD}}

    - name: Create tailscale
      if: env.run_tasks == 'true'
      shell: bash
      run: |
        #tailscale
        #sudo ufw allow 41641/udp
        sudo tailscale up --hostname=github-action --auth-key="$TAIL_KEY" --advertise-exit-node
        tailscale status

      env:
        SUPER_SECRET: ${{ secrets.SUPER_SECRET }}
        MY_SSH_USER: ${{secrets.MY_SSH_USER}}
        MY_SSH_PSW: ${{secrets.MY_SSH_PSW}}
        MY_SSHJ_NS: ${{secrets.MY_SSHJ_NS}}
        MY_SSHJ_HOST: ${{secrets.MY_SSHJ_HOST}}
        NETBIRD_UP: ${{secrets.NETBIRD_UP}}
        SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
        NETBIRD_KEY: ${{secrets.NETBIRD_KEY}}
        NETBIRD_NAME: ${{secrets.NETBIRD_NAME}}
        TAIL_KEY: ${{secrets.TAIL_KEY}}

    - name: Create  netbird
      if: env.run_tasks == 'true'
      shell: bash
      run: |
        

        export NETBIRD_UP_CMD="PIONS_LOG_DEBUG=all NB_LOG_LEVEL=debug GRPC_GO_LOG_VERBOSITY_LEVEL=99 GRPC_GO_LOG_SEVERITY_LEVEL=info netbird up --hostname $NETBIRD_NAME --setup-key $NETBIRD_KEY"
        $NETBIRD_UP_CMD || true

        if dpkg -s netbird &>/dev/null; then
        echo 'netbird is installed'
        netbird status -d --filter-by-status connected
        fi
        if which netbird &>/dev/null; then
        echo 'netbird is installed'
        netbird status -d --filter-by-status connected
        fi


        # netbird status

      env:
        SUPER_SECRET: ${{ secrets.SUPER_SECRET }}
        MY_SSH_USER: ${{secrets.MY_SSH_USER}}
        MY_SSH_PSW: ${{secrets.MY_SSH_PSW}}
        MY_SSHJ_NS: ${{secrets.MY_SSHJ_NS}}
        MY_SSHJ_HOST: ${{secrets.MY_SSHJ_HOST}}
        NETBIRD_UP: ${{secrets.NETBIRD_UP}}
        SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
        NETBIRD_KEY: ${{secrets.NETBIRD_KEY}}
        NETBIRD_NAME: ${{secrets.NETBIRD_NAME}}
        TAIL_KEY: ${{secrets.TAIL_KEY}}

    - name: Create waiter program
      if: env.run_tasks == 'true'
      shell: bash
      run: |
        file=/tmp/blocker.txt
        echo "waiting on file $file ......"
        echo "run quit-waiter.sh to exit"
        #https://stackoverflow.com/questions/19505227/integer-expression-expected-error-in-shell-script
        MinutesIter="1"
        MinutesIter="${MinutesIter//[$'\t\r\n ']}"


        current_time=$(($(date +%s)))
        RUNNER_END_STAMP=$(($RUNNER_END_STAMP))
        #while  [ $start_time -lt $end_time ]; do sleep 6; start_time=$(date +%s); echo start_time: $start_time, end_time: $end_time ; done
        echo "RUNNER_END_STAMP : $RUNNER_END_STAMP"

        echo "RUNNER_START_STAMP : $RUNNER_START_STAMP"


        #https://unix.stackexchange.com/questions/752138/get-total-time-system-has-been-used-today-in-minutes
        # get_minutes() {
        #   local h=${1%%:*}
        #   local m=${1#*:}
        #   echo $((10#$h * 60 + 10#$m))
        # }

        # sessions_uptime=$(last | grep "$(date '+%b %d')" | grep -E 'reboot|suspended' | grep -v 'still running' | awk '{print $NF}' | tr -d '()' | awk -F: '{sum_minutes+=$1*60+$2} END {print sum_minutes}')

        # current_uptime_seconds=$(awk '{print int($1)}' /proc/uptime)

        # total_uptime=$((sessions_uptime + current_uptime_seconds / 60))
        # echo "TOTAL CURRENT RUNTIME OF THE DAY: ${total_uptime} minutes"


        while [  -s "$file" ] && [  $current_time -lt $RUNNER_END_STAMP ]; 
        do sleep 5;
        current_time=$(($(date +%s)));
        done
        echo "exit loop"

        ./command/final.sh

      env:
        MQTT_TUNNEL_TOPIC: ${{ secrets.MQTT_TUNNEL_TOPIC }}
      #- name: Setup tmate session
      #uses: mxschmitt/action-tmate@v3  
    - uses: actions/upload-artifact@v4
      if: env.run_tasks == 'true'
      with:
        name: my-install-${{ env.STAMP }}
        path: /tmp/install/*
        compression-level: 9 # maximum compression
