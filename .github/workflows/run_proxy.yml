# This is a basic workflow to help you get started with Actions

name: run_proxy

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

    #schedule:
    # https://github.com/orgs/community/discussions/13454#discussioncomment-11159669
    #- cron: '47 */1 * * *'

jobs:
  run_proxy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
    - name: Check if it's 0/6/12/18
      run: |
        echo "event name is:" ${{ github.event_name }}

        current_hour=$(TZ='Asia/Shanghai' date +'%H')
        echo "Current hour in PST: $current_hour"
          
        if [ "$current_hour" == "00" ]; then
          echo "run task on schedule"
          echo "run_tasks=true" >> $GITHUB_ENV
        fi
        if [ "$current_hour" == "06" ]; then
          echo "run task on schedule"
          echo "run_tasks=true" >> $GITHUB_ENV
        fi
        if [ "$current_hour" == "12" ]; then
          echo "run task on schedule"
          echo "run_tasks=true" >> $GITHUB_ENV
        fi
        if [ "$current_hour" == "18" ]; then
          echo "run task on schedule"
          echo "run_tasks=true" >> $GITHUB_ENV
        fi
        if [ ! "${{ github.event_name }}" == "schedule" ]; then
          echo "run task on ${{ github.event_name }}"
          echo "run_tasks=true" >> $GITHUB_ENV
        fi

    - name: Checkout Code
      if: env.run_tasks == 'true'
      uses: actions/checkout@v3

    - name: Set current date as env variable
      if: env.run_tasks == 'true'
      run: |
        echo "START_TIME=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
        echo "STAMP=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV

    - name: Echo current date
      if: env.run_tasks == 'true'
      run: |
        echo ${{ env.STAMP }} # Gives "2022-12-11-01-42-20"
        echo ${{ env.START_TIME }} # Gives "2022-12-11T01:42:20"

    - name: Create User
      if: env.run_tasks == 'true'
      shell: bash
      run: |
        echo github.workspace ${{ github.workspace }}
        UBUNTU_RELEASE=$(bash <(cat /etc/os-release; echo 'echo ${VERSION_ID/*, /}'))
        UBUNTU_CODENAME=$(bash <(cat /etc/os-release; echo 'echo ${UBUNTU_CODENAME/*, /}'))
        ARCH=$(dpkg --print-architecture)

        # https://support.torproject.org/apt/tor-deb-repo/
        sudo apt install -y apt-transport-https

        cat << EOF | sudo tee -a /etc/apt/sources.list.d/tor.list
        deb     [signed-by=/usr/share/keyrings/deb.torproject.org-keyring.gpg] https://deb.torproject.org/torproject.org $UBUNTU_CODENAME main
        deb-src [signed-by=/usr/share/keyrings/deb.torproject.org-keyring.gpg] https://deb.torproject.org/torproject.org $UBUNTU_CODENAME main
        EOF

        wget -qO- https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --dearmor | sudo tee /usr/share/keyrings/deb.torproject.org-keyring.gpg >/dev/null

        sudo apt update

        sudo apt-get install -y openssh-server tmux iperf jq nginx mosquitto mosquitto-clients wireguard-tools tor deb.torproject.org-keyring
        #autossh

        sudo adduser --disabled-password --gecos "" "$MY_SSH_USER"
        sudo usermod -a -G sudo "$MY_SSH_USER"
        sudo usermod -a -G docker "$MY_SSH_USER"
        echo $MY_SSH_USER:$MY_SSH_PSW | sudo chpasswd

        # echo '# UID' | sudo tee -a /home/$MY_SSH_USER/.bashrc > /dev/null
        # echo 'export UID=$(id -u)' | sudo tee -a /home/$MY_SSH_USER/.bashrc > /dev/null
        # echo '# GID' | sudo tee -a /home/$MY_SSH_USER/.bashrc > /dev/null
        # echo 'export GID=$(id -g)' | sudo tee -a /home/$MY_SSH_USER/.bashrc > /dev/null


        file=/tmp/blocker.txt
        # touch $file
        echo xx >> $file
        sudo chown $MY_SSH_USER:$MY_SSH_USER $file


        # https://stackoverflow.com/questions/820517/bashrc-at-ssh-login
        cat << 'EOF' | sudo tee -a /home/$MY_SSH_USER/.bashrc
        export UID=$(id -u)
        export GID=$(id -g)
        export PATH=$PATH:~/.local/bin:~/.cargo/bin
        export XDG_CONFIG_HOME=~/.config
        EOF

        cat << EOF | sudo tee -a /home/$MY_SSH_USER/.bashrc
        alias quit-waiter="rm $file && exit"
        EOF

        cat << EOF | sudo tee -a /home/$MY_SSH_USER/.bash_profile
        if [ -f ~/.bashrc ]; then
          . ~/.bashrc
        fi
        EOF

        # setup sshd
        sudo sed -i "s/.*AllowTcpForwarding .*/AllowTcpForwarding yes/" /etc/ssh/sshd_config
        sudo sed -i "s/.*GatewayPorts .*/GatewayPorts yes/" /etc/ssh/sshd_config

        sudo systemctl restart ssh

        # set git
        git config --global user.name "$MY_SSH_USER"
        git config --global user.email "$MY_SSH_USER@github.com"

        # setup tor

        hashpass=$(tor --hash-password "$TOR_PASSWORD")
        sudo sed -i "s/.*HashedControlPassword.*/HashedControlPassword $hashpass/" /etc/tor/torrc

        cat << EOF | sudo tee -a /etc/tor/torrc
        SocksPort 0.0.0.0:9060
        ControlPort 0.0.0.0:9061
        CookieAuthentication 0

        ExcludeNodes {cn},{hk},{mo},{kp},{ir},{sy},{pk},{cu},{vn}
        MiddleNodes {GE},{IT},{HU},{AT},{HR},{RO},{PL},{FR},{FI},{SE},{IS},{NO},{IE},{EE},{DK},{LT},{CZ},{BE},{GR},{RS},{BG},{TR},{ES},{NL}
        ExitNodes {GE},{IT},{HU},{AT},{HR},{RO},{PL},{FR},{FI},{SE},{IS},{NO},{IE},{EE},{DK},{LT},{CZ},{BE},{GR},{RS},{BG},{TR},{ES},{NL}

        EOF


        cat << EOF | sudo tee -a /etc/mosquitto/mosquitto.conf
        listener 1883 0.0.0.0
        allow_anonymous true
        EOF
        sudo systemctl restart mosquitto



        sudo wget -q https://raw.githubusercontent.com/gpakosz/.tmux/refs/heads/master/.tmux.conf -O /home/$MY_SSH_USER/.tmux.conf
        sudo wget -q https://raw.githubusercontent.com/gpakosz/.tmux/refs/heads/master/.tmux.conf.local -O /home/$MY_SSH_USER/.tmux.conf.local

        nohup ssh -o StrictHostKeyChecking=no  $MY_SSHJ_NS@ssh-j.com -N -R $MY_SSHJ_HOST:22:localhost:22 &

        #cargo install bore-cli
        wget https://github.com/ekzhang/bore/releases/download/v0.5.2/bore-v0.5.2-x86_64-unknown-linux-musl.tar.gz  -O bore.tar.gz
        tar xvf ./bore.tar.gz
        sudo mv ./bore /bin/

        nohup bore local 22 --to bore.pub -p $BORE_PORT > /tmp/bore.out 2>&1 &
        curl -sSf https://sshx.io/get | sh
        nohup sshx > /tmp/sshx.out 2>&1 &




        # add ssh pub key
        export USER_HOME=$HOME
        sudo mkdir -p $USER_HOME/.ssh
        sudo echo "$SSH_PUBLIC_KEY" >> $USER_HOME/.ssh/authorized_keys
        sudo echo "$SSH_PUBLIC_KEY" >> $USER_HOME/.ssh/id_ed25519.pub
        sudo echo "$SSH_PRIVATE_KEY" >> $USER_HOME/.ssh/id_ed25519
        sudo chmod 600 $USER_HOME/.ssh/*
        sudo chmod 700 $USER_HOME/.ssh


        export USER_HOME=/home/$MY_SSH_USER
        sudo mkdir -p $USER_HOME/.ssh
        sudo echo "$SSH_PUBLIC_KEY" >> $USER_HOME/.ssh/authorized_keys
        sudo echo "$SSH_PUBLIC_KEY" >> $USER_HOME/.ssh/id_ed25519.pub
        sudo echo "$SSH_PRIVATE_KEY" >> $USER_HOME/.ssh/id_ed25519

        sudo chown $MY_SSH_USER:$MY_SSH_USER $USER_HOME/.ssh
        sudo chown $MY_SSH_USER:$MY_SSH_USER $USER_HOME/.ssh/*

        sudo chmod 600 $USER_HOME/.ssh/*
        sudo chmod 700 $USER_HOME/.ssh



        # github
        cli_url=$(curl -L   -H "Accept: application/vnd.github+json"   https://api.github.com/repos/cli/cli/releases | jq -r ".[0].assets[] | .browser_download_url" | grep "linux_amd64.tar.gz")
        wget -q $cli_url -O gh.tar.gz
        sudo tar xvf gh.tar.gz --strip-components=1  -C  /usr/local
        #cat <<< $GH_TOKEN | gh auth login --with-token
        #echo $GH_TOKEN | gh auth login --hostname github.com git_protocol ssh --with-token
        echo "$GH_TOKEN_ENV" | gh auth login --with-token
        gh run list --workflow=run_proxy.yml

        # nginx auth
        sudo apt install -y apache2-utils
        sudo htpasswd -b /etc/nginx/.htpasswd $MY_SSH_USER $MY_SSH_PSW




        git clone git@github.com:waxz/self-host-reader.git /tmp/self-host-reader
        nohup /tmp/self-host-reader/run_readeck.sh > /tmp/reader.out 2>&1 &

        git clone git@github.com:waxz/quartz.git /tmp/quartz

        export QUARTZ_PORT=8002
        export QUARTZ_CONTENT=/tmp/self-host-reader/notes
        export QUARTZ_DOMAIN=quartz
        nohup /tmp/quartz/run_quartz.sh > /tmp/$QUARTZ_DOMAIN.out 2>&1 &

        export QUARTZ_PORT=8003
        export QUARTZ_CONTENT=/tmp/quartz/content
        export QUARTZ_DOMAIN=quartz-public
        nohup /tmp/quartz/run_quartz.sh > /tmp/$QUARTZ_DOMAIN.out 2>&1 &        

      env:
        SUPER_SECRET: ${{ secrets.SUPER_SECRET }}
        MY_SSH_USER: ${{secrets.MY_SSH_USER}}
        MY_SSH_PSW: ${{secrets.MY_SSH_PSW}}
        MY_SSHJ_NS: ${{secrets.MY_SSHJ_NS}}
        MY_SSHJ_HOST: ${{secrets.MY_SSHJ_HOST}}
        NETBIRD_UP: ${{secrets.NETBIRD_UP}}
        SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
        SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}

        NETBIRD_KEY: ${{secrets.NETBIRD_KEY}}
        NETBIRD_NAME: ${{secrets.NETBIRD_NAME}}
        TAIL_KEY: ${{secrets.TAIL_KEY}}
        TOR_PASSWORD: ${{secrets.TOR_PASSWORD}}
        BORE_PORT: ${{secrets.BORE_PORT}}
        GH_TOKEN_ENV: ${{secrets.GH_TOKEN}}

    - name: Create tailscale
      if: env.run_tasks == 'true'
      shell: bash
      run: |
        
        #tailscale
        #sudo ufw allow 41641/udp

        curl -fsSL https://tailscale.com/install.sh | sh

        echo 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.d/99-tailscale.conf
        echo 'net.ipv6.conf.all.forwarding = 1' | sudo tee -a /etc/sysctl.d/99-tailscale.conf
        sudo sysctl -p /etc/sysctl.d/99-tailscale.conf

        printf '#!/bin/sh\n\nethtool -K %s rx-udp-gro-forwarding on rx-gro-list off \n' "$(ip -o route get 8.8.8.8 | cut -f 5 -d " ")" | sudo tee /etc/networkd-dispatcher/routable.d/50-tailscale
        sudo chmod 755 /etc/networkd-dispatcher/routable.d/50-tailscale





        sudo tailscale up --hostname=github-action --auth-key="$TAIL_KEY" --advertise-exit-node
        tailscale status

      env:
        SUPER_SECRET: ${{ secrets.SUPER_SECRET }}
        MY_SSH_USER: ${{secrets.MY_SSH_USER}}
        MY_SSH_PSW: ${{secrets.MY_SSH_PSW}}
        MY_SSHJ_NS: ${{secrets.MY_SSHJ_NS}}
        MY_SSHJ_HOST: ${{secrets.MY_SSHJ_HOST}}
        NETBIRD_UP: ${{secrets.NETBIRD_UP}}
        SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
        NETBIRD_KEY: ${{secrets.NETBIRD_KEY}}
        NETBIRD_NAME: ${{secrets.NETBIRD_NAME}}
        TAIL_KEY: ${{secrets.TAIL_KEY}}

    - name: Create  netbird
      if: env.run_tasks == 'true'
      shell: bash
      run: |
        #exit 0

        # netbird
        curl -fsSL https://pkgs.netbird.io/install.sh | sudo bash
        export NETBIRD_UP_CMD="PIONS_LOG_DEBUG=all NB_LOG_LEVEL=debug GRPC_GO_LOG_VERBOSITY_LEVEL=99 GRPC_GO_LOG_SEVERITY_LEVEL=info netbird up --hostname $NETBIRD_NAME --setup-key $NETBIRD_KEY"
        $NETBIRD_UP_CMD || true

        if dpkg -s netbird &>/dev/null; then
        echo 'netbird is installed'
        netbird status -d --filter-by-status connected
        fi
        if which netbird &>/dev/null; then
        echo 'netbird is installed'
        netbird status -d --filter-by-status connected
        fi


        # netbird status

      env:
        SUPER_SECRET: ${{ secrets.SUPER_SECRET }}
        MY_SSH_USER: ${{secrets.MY_SSH_USER}}
        MY_SSH_PSW: ${{secrets.MY_SSH_PSW}}
        MY_SSHJ_NS: ${{secrets.MY_SSHJ_NS}}
        MY_SSHJ_HOST: ${{secrets.MY_SSHJ_HOST}}
        NETBIRD_UP: ${{secrets.NETBIRD_UP}}
        SSH_PUBLIC_KEY: ${{secrets.SSH_PUBLIC_KEY}}
        NETBIRD_KEY: ${{secrets.NETBIRD_KEY}}
        NETBIRD_NAME: ${{secrets.NETBIRD_NAME}}
        TAIL_KEY: ${{secrets.TAIL_KEY}}
    - name: Create go proxy
      if: env.run_tasks == 'true'
      shell: bash
      run: |
        




        # https://github.com/xtaci/kcptun
        # curl -L  https://raw.githubusercontent.com/xtaci/kcptun/master/download.sh | sh
        # mv kcptun-linux-amd64-*.tar.gz kcptun.tar.gz
        # tar xvf ./kcptun.tar.gz
        # sudo mv ./server_linux_amd64 /bin/kcptun_server
        # sudo mv ./client_linux_amd64 /bin/kcptun_client

        ulimit -n 65535
        # https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/7/html/kernel_administration_guide/working_with_sysctl_and_kernel_tunables#modifying_files_in_etc_sysctl_d

        cat << EOF | sudo tee -a /etc/sysctl.d/99-custom.conf
        net.core.rmem_max=26214400 // BDP - bandwidth delay product
        net.core.rmem_default=26214400
        net.core.wmem_max=26214400
        net.core.wmem_default=26214400
        net.core.netdev_max_backlog=2048 // proportional to -rcvwnd
        EOF
        sysctl -p /etc/sysctl.d/99-custom.conf


        # gost https://v2.gost.run/simple-obfs/
        wget -q https://github.com/ginuerzh/gost/releases/download/v2.12.0/gost_2.12.0_linux_amd64.tar.gz -O gost_linux.tar.gz
        tar xvf ./gost_linux.tar.gz
        sudo mv ./gost /bin/

        # https://localtonet.com/download
        # https://localtonet.com/documents/linux
        wget -q https://localtonet.com/download/localtonet-linux-x64.zip
        unzip ./localtonet-linux-x64.zip
        chmod +x ./localtonet
        sudo mv ./localtonet /bin/




        # go proxy https://github.com/snail007/goproxy/tree/master

        sudo bash -c "$(curl -s -L https://raw.githubusercontent.com/snail007/goproxy/master/install_auto.sh)"

        # cloudflared
        sudo wget -q https://github.com/cloudflare/cloudflared/releases/download/2025.2.0/cloudflared-linux-amd64  -O /bin/cloudflared
        sudo chmod +x /bin/cloudflared
        sudo sysctl -w net.core.rmem_max=7500000
        sudo sysctl -w net.core.wmem_max=7500000

        # run proxy
        nohup proxy http -t kcp -m -p ":38080" --kcp-key mypassword --kcp-mode="fast3" &
        nohup proxy http -t tcp -p "0.0.0.0:38081" &

        #nohup kcptun_server -t ":38081" -l ":4000" -mode fast3 -nocomp -sockbuf 16777217 -dscp 46 &

        nohup gost -L=ss+ohttp://chacha20:123456@:38082 &
        nohup gost -L=mws://:38083?enableCompression=true?keepAlive=1 &

        #nohup tor &
        #nohup gost -L=mws://:38084 -F=socks5://:9060 &
        #nohup gost -L=relay+wss://:38084 &





        cat << 'EOF' | sudo tee -a /bin/kill_cloudflared.sh
        ps -A -o pid,cmd | grep -v grep | grep -E "[0-9] cloudflared tunnel" | awk '{print $1}' | sort -u | xargs -I {} /bin/bash -c 'kill -TERM {}'

        EOF
        sudo chmod +x /bin/kill_cloudflared.sh
        cat << 'EOF' | sudo tee -a /bin/kill_pinggy.sh

        ps -AL -o pid,cmd | grep -v grep  | grep -E "pinggy.io$" | awk '{print $1}' | sort -u | xargs -I {} /bin/bash -c 'kill -TERM {}'
        EOF
        sudo chmod +x /bin/kill_pinggy.sh


        #nohup cloudflared tunnel --url localhost:38083  > /tmp/cloudflared.out 2>&1 &
        nohup bash -c "while true; do cloudflared tunnel --url localhost:38083   > /tmp/cloudflared.out 2>&1 ;flock -x  /tmp/cloudflared.out  truncate -s 0 /tmp/cloudflared.out;  done " > /tmp/cloudflared.nohup.out 2>&1 &


        nohup bash -c "while true; do ssh -p 443 -R0:localhost:38082 -o StrictHostKeyChecking=no -o ServerAliveInterval=30 $PINGGY_TOKEN+tcp@free.pinggy.io  > /tmp/pinggy.out ;flock -x  /tmp/pinggy.out  truncate -s 0 /tmp/pinggy.out;  done " > /tmp/pinggy.nohup.out 2>&1 &

        nohup bash -c "while true; do ssh -p 443 -R0:localhost:22 -o StrictHostKeyChecking=no -o ServerAliveInterval=30 $PINGGY_SSH_TOKEN+tcp@free.pinggy.io  > /tmp/pinggy_ssh.out ;flock -x  /tmp/pinggy_ssh.out  truncate -s 0 /tmp/pinggy_ssh.out;  done " > /tmp/pinggy_ssh.nohup.out 2>&1 &




        cat << EOF | sudo tee -a /bin/run_localtonet.sh
        LOCALNET_AUTHTOKEN=$LOCALNET_AUTHTOKEN
        LOCALNET_API=$LOCALNET_API

        EOF

        cat << 'EOF' | sudo tee -a /bin/run_localtonet.sh
        connectionStatus=$(curl "https://localtonet.com/api/GetTunnelsByAuthToken/$LOCALNET_AUTHTOKEN"   --header "Authorization: Bearer $LOCALNET_API" | jq -r '.result[0].status')
        tunnelId=$(curl "https://localtonet.com/api/GetTunnelsByAuthToken/$LOCALNET_AUTHTOKEN"   --header "Authorization: Bearer $LOCALNET_API" | jq -r '.result[0].id')
        echo LOCALNET_AUTHTOKEN: $LOCALNET_AUTHTOKEN
        echo LOCALNET_API: $LOCALNET_API
        echo connectionStatus: $connectionStatus
        echo tunnelId: $tunnelId

        if [[  $connectionStatus == "true" ]]; then echo "StopTunnel/$tunnelId" ;curl "https://localtonet.com/api/StopTunnel/$tunnelId"  --header "Authorization: Bearer $LOCALNET_API"; fi


        timeout 1740s localtonet authtoken $LOCALNET_AUTHTOKEN > localtonet.log &

        hasError=$(curl "https://localtonet.com/api/StartTunnel/$tunnelId"  --header "Authorization: Bearer $LOCALNET_API" | jq -r ".hasError")
        connectionStatus=$(curl "https://localtonet.com/api/GetTunnelsByAuthToken/$LOCALNET_AUTHTOKEN"   --header "Authorization: Bearer $LOCALNET_API" | jq -r '.result[0].status')

        echo hasError: $hasError
        echo connectionStatus: $connectionStatus

        while [[  $hasError == "true" ]]; do sleep 5; echo "StartTunnel/$tunnelId" ; hasError=$(curl "https://localtonet.com/api/StartTunnel/$tunnelId"  --header "Authorization: Bearer $LOCALNET_API" | jq -r ".hasError") ;done
        sleep 10
        connectionStatus=$(curl "https://localtonet.com/api/GetTunnelsByAuthToken/$LOCALNET_AUTHTOKEN"   --header "Authorization: Bearer $LOCALNET_API" | jq -r '.result[0].status')
        echo connectionStatus: $connectionStatus
        echo "start wait"
        while [[ $connectionStatus == "1" ]]; do connectionStatus=$(curl "https://localtonet.com/api/GetTunnelsByAuthToken/$LOCALNET_AUTHTOKEN"   --header "Authorization: Bearer $LOCALNET_API" | jq -r '.result[0].status'); sleep 5  ;done

        EOF
        sudo chmod +x /bin/run_localtonet.sh

        nohup bash -c "while true; do /bin/run_localtonet.sh ; truncate -s 0 /tmp/localtonet.out ;done"  > /tmp/localtonet.out 2>&1 &

        nohup $PIPING_CMD &

      env:
        LOCALNET_AUTHTOKEN: ${{ secrets.LOCALNET_AUTHTOKEN }}
        LOCALNET_API: ${{ secrets.LOCALNET_API }}
        PINGGY_TOKEN: ${{ secrets.PINGGY_TOKEN }}
        PIPING_CMD: ${{secrets.PIPING_CMD}}
        PINGGY_SSH_TOKEN: ${{secrets.PINGGY_SSH_TOKEN}}

    - name: Create waiter program
      if: env.run_tasks == 'true'
      shell: bash
      run: |
        file=/tmp/blocker.txt
        echo "waiting on file $file ......"
        echo "run quit-waiter.sh to exit"
        #https://stackoverflow.com/questions/19505227/integer-expression-expected-error-in-shell-script
        MinutesIter="1"
        MinutesIter="${MinutesIter//[$'\t\r\n ']}"

        # publish cloudflared url
        cloudflared_url=""
        pinggy_url=""
        pinggy_ssh_url=""

        while [[ ! $cloudflared_url == *"https"* ]]; do sleep 1; cloudflared_url=$(cat /tmp/cloudflared.out | grep -oE "https://[a-zA-Z0-9.-]+\.trycloudflare\.com"); done
        echo cloudflared_url $cloudflared_url
        while [[ ! $pinggy_url == *"tcp"* ]]; do sleep 1; pinggy_url=$(flock -s  /tmp/pinggy.out  cat  /tmp/pinggy.out | grep -oE "tcp://[a-zA-Z0-9.-]+\.pinggy\.link:[0-9.-]+"); done
        echo pinggy_url $pinggy_url
        while [[ ! $pinggy_ssh_url == *"tcp"* ]]; do sleep 1; pinggy_ssh_url=$(flock -s  /tmp/pinggy_ssh.out  cat  /tmp/pinggy_ssh.out | grep -oE "tcp://[a-zA-Z0-9.-]+\.pinggy\.link:[0-9.-]+"); done
        echo pinggy_ssh_url $pinggy_ssh_url

        JSON_STRING=$( jq -n \
                  --arg cloudflared_url "$cloudflared_url" \
                  --arg pinggy_url "$pinggy_url" \
                  --arg pinggy_ssh_url "$pinggy_ssh_url" \
                  '{cloudflared_url: $cloudflared_url, pinggy_url: $pinggy_url, pinggy_ssh_url: $pinggy_ssh_url}' )

        echo JSON_STRING $JSON_STRING



        start_time=$(date +%s)
        end_time=$((start_time+6*3600-600))
        echo start_time: $start_time, end_time: $end_time
        #while  [ $start_time -lt $end_time ]; do sleep 6; start_time=$(date +%s); echo start_time: $start_time, end_time: $end_time ; done



        cat << 'EOF' | sudo tee -a /bin/loop_task.sh

        if [ -s /tmp/cloudflared.out ]; then
        cloudflared_url_new=$(flock -s  /tmp/cloudflared.out   cat /tmp/cloudflared.out | grep -oE "https://[a-zA-Z0-9.-]+\.trycloudflare\.com");
        if [ -z "$cloudflared_url_new" ]; then
            echo "No cloudflared URL found";
        else
            cloudflared_url=$cloudflared_url_new
        fi
        fi
        if [ -s /tmp/pinggy.out ]; then
        pinggy_url_new=$(flock -s  /tmp/pinggy.out  cat  /tmp/pinggy.out | grep -oE "tcp://[a-zA-Z0-9.-]+\.pinggy\.link:[0-9.-]+");
        if [ -z "$pinggy_url_new" ]; then
            echo "No pinggy URL found";
        else
            pinggy_url=$pinggy_url_new
        fi
        fi
        if [ -s /tmp/pinggy_ssh.out ]; then
        pinggy_ssh_url_new=$(flock -s  /tmp/pinggy_ssh.out  cat  /tmp/pinggy_ssh.out | grep -oE "tcp://[a-zA-Z0-9.-]+\.pinggy\.link:[0-9.-]+");
        if [ -z "$pinggy_ssh_url_new" ]; then
            echo "No pinggy URL found";
        else
            pinggy_ssh_url=$pinggy_ssh_url_new
        fi
        fi

        sshx_url=$(flock -s  /tmp/sshx.out  cat  /tmp/sshx.out | grep -oE "https://sshx\.io/s/\S+");
        # remove color code
        sshx_url=$(echo $sshx_url | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g');



        UP_TIME=$(uptime -p)

        JSON_STRING=$( jq -n \
                  --arg cloudflared_url "$cloudflared_url" \
                  --arg pinggy_url "$pinggy_url" \
                  --arg up_time "$UP_TIME" \
                  --arg sshx_url "$sshx_url"\
                  --arg pinggy_ssh_url "$pinggy_ssh_url" \
                  '{up_time: $up_time, sshx_url: $sshx_url, cloudflared_url: $cloudflared_url, pinggy_url: $pinggy_url, pinggy_ssh_url: $pinggy_ssh_url}' )

        if [ $? -ne 0 ]; then
        echo "Failed to create JSON string"
        fi


        mosquitto_pub -t $MQTT_TUNNEL_TOPIC -m "$JSON_STRING"; 


        mosquitto_pub -t $MQTT_TUNNEL_TOPIC -m "$JSON_STRING" -h test.mosquitto.org; 
        if [ $? -ne 0 ]; then
        echo "Failed to publish message to MQTT broker"
        fi



        EOF
        sudo chmod +x /bin/loop_task.sh



        while [  -s "$file" ] && [ $start_time -lt $end_time ]; 
        do sleep 5; 
        start_time=$(date +%s); 

        /bin/loop_task.sh || true;



        done

        if which tailscale &>/dev/null; then
        echo 'tailscale logout'
        sudo tailscale logout
        fi
        if which netbird &>/dev/null; then
        echo 'netbird down'
        sudo netbird down
        fi

        gh workflow run .github/workflows/run_proxy.yml
        gh run list --workflow=run_proxy.yml

        echo "commit github update"
        (cd /tmp/self-host-reader/ && git add --all && git commit -m "update" && git push origin main ) || true
        (cd /tmp/quartz/ && git add --all && git commit -m "update" && git push origin main ) || true

      env:
        MQTT_TUNNEL_TOPIC: ${{ secrets.MQTT_TUNNEL_TOPIC }}
      #- name: Setup tmate session
      #uses: mxschmitt/action-tmate@v3  
    - uses: actions/upload-artifact@v4
      if: env.run_tasks == 'true'
      with:
        name: my-install-${{ env.STAMP }}
        path: /tmp/install/*
        compression-level: 9 # maximum compression
