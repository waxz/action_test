name: Docker test

on:
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  container-test-job:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
      env:
        NODE_ENV: development
      ports:
        - 80
      volumes:
        - /home/runner:/home/runner 
        - /tmp:/tmp
        


    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: Create Custom User With secrets    
        shell: bash
        run: |
          echo github.workspace ${{ github.workspace }}

          export DEBIAN_FRONTEND=noninteractive
          export TZ=Etc/UTC
          apt-get update && apt-get install -y  gcc g++ cmake build-essential  openssh-server tmux autossh sudo   git curl
    
          adduser --disabled-password --gecos "" "$MY_SSH_USER"
          usermod -a -G sudo "$MY_SSH_USER"
         
          # usermod -a -G docker "$MY_SSH_USER"
          
          echo $MY_SSH_USER:$MY_SSH_PSW | sudo chpasswd

          echo download tmux.conf


          # wget https://raw.githubusercontent.com/gpakosz/.tmux/refs/heads/master/.tmux.conf -O /tmp/.tmux.conf
          wget -q https://raw.githubusercontent.com/gpakosz/.tmux/refs/heads/master/.tmux.conf -O /home/$MY_SSH_USER/.tmux.conf
          wget -q https://raw.githubusercontent.com/gpakosz/.tmux/refs/heads/master/.tmux.conf.local -O /home/$MY_SSH_USER/.tmux.conf.local
          
          wget -q https://github.com/cloudflare/cloudflared/releases/download/2025.2.0/cloudflared-linux-amd64  -O /bin/cloudflared
          
          # chmod +x  /bin/cloudflared
          
          # cp /tmp/.tmux.conf* /home/$MY_SSH_USER/       
          




          # netbird
          curl -fsSL https://pkgs.netbird.io/install.sh | sh

          $NETBIRD_UP
          netbird status
          



          # tmux new-session -s mySession -d
          # tmux new -d -s mySession
          # bash -c "tmux new-session -s mySession -d"   
          
          # tmux send-keys -t mySession.0 "ssh -o StrictHostKeyChecking=no $MY_SSHJ_NS@ssh-j.com -N -R $MY_SSHJ_HOST:22:localhost:22" ENTER
          # tmux a -t mySession
          
          # ssh -o "StrictHostKeyChecking no" $MY_SSHJ_NS@ssh-j.com -N -R $MY_SSHJ_HOST:22:localhost:22
          nohup ssh -o "StrictHostKeyChecking no" $MY_SSHJ_NS@ssh-j.com -N -R $MY_SSHJ_HOST:22:localhost:22 &
          # nohup autossh -o "StrictHostKeyChecking=no" -o "ExitOnForwardFailure=yes" -o "ServerAliveInterval=10" -o "ServerAliveCountMax=3"   $MY_SSHJ_NS@ssh-j.com -N -R $MY_SSHJ_HOST:22:localhost:22 &
          
          # autossh -o "StrictHostKeyChecking=no" -o "ExitOnForwardFailure=yes" -o "ServerAliveInterval=10" -o "ServerAliveCountMax=3"   $MY_SSHJ_NS@ssh-j.com -N -R $MY_SSHJ_HOST:22:localhost:22

          
          echo run ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no   -J $MY_SSHJ_NS@ssh-j.com $MY_SSH_USER@$MY_SSHJ_HOST
         
          file=/tmp/blocker.txt
          
          # touch $file   
          echo xx >> $file
          bash -c "echo rm $file >> /bin/quit-ssj.sh"
          chmod +x /bin/quit-ssj.sh
          
          echo "waiting on file $file ......"   
          echo "run quit-ssj.sh to exit"   
          
          while [  -s "$file" ]; do sleep 10; done
          echo "exited......"
          
        env:
          SUPER_SECRET: ${{ secrets.SUPER_SECRET }}       
          MY_SSH_USER: ${{secrets.MY_SSH_USER}}
          MY_SSH_PSW: ${{secrets.MY_SSH_PSW}}
          MY_SSHJ_NS: ${{secrets.MY_SSHJ_NS}}
          MY_SSHJ_HOST: ${{secrets.MY_SSHJ_HOST}}      
          NETBIRD_UP: ${{secrets.NETBIRD_UP}}


          


      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          echo github.workspace : ${{ github.workspace }} 
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
      
      - uses: actions/upload-artifact@v4
        with:
          name: my-artifact
          path: ${{ steps.strings.outputs.build-output-dir }}/*
          compression-level: 9 # maximum compression
